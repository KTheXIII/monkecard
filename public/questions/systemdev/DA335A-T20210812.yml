version: '0.0.0'

datas:
  - content: |
      # Processmodeller: Vad är korrekta påståenden gällande processer och processmodeller för utveckling av mjukvara?
    image: null
    options:
      - Evolutionära processer kan användas tillsammans med prototyping (som en processmodell inom Software Engineering).
      - Processförbättring är en del av processen som beskrivs i Scrum.
      - Vattenfallsprocessen är en föråldrad process som inte längre har någon passande situation där den rimligt kan användas.
      - Inkrementella processer uppstod och argumenterades för i samband med att begreppet agila processer etablerades runt millennieskiftet.
      - Inkrementella processer lämpar sig väl för stora organisationer med utförliga management-processer.
      - Agila processer kräver mycket lite disciplin av utvecklarna vilket innebär stor flexibilitet.
    correct:
      - 0
      - 1
    categories:
      - processmodeller
    source: 'DA335A-T20210812Q01'
  - content: |
      # Processmodeller: Vad är korrekta påståenden gällande processer och processmodeller för utveckling av mjukvara?
    image: null
    options:
      - Evolutionära processmodeller är också iterativa processmodeller.
      - Självorganiserande grupper i agil utveckling kräver stor disciplin och kan vara svåra att hantera i en hierarkisk organisation.
      - Med agila processer så är det lätt att sätta ett fast pris på ett projekt.
      - Inkrementella processer kan användas med en stor release när alla delar är klara eller med flera mindre releaser.
      - De två angreppssätten top-down och bottom-up för inkrementella processmodeller bör inte kombineras.
      - I en iterativ process så måste koden innehålla en viss mängd loopar.
    correct:
      - 0
      - 1
      - 3
    categories:
      - processmodeller
    source: 'DA335A-T20210812Q02'
  - content: |
      # Kravhantering: Vad är korrekta påståenden gällande krav och kravhantering?
    image: null
    options:
      - En aktör kan vara en person som interagerar med systemet men kan också representera ett annat system.
      - Användningsfall beskriver vad ett system ska göra men inte hur detta utförs i kod.
      - När man arbetar med olika synvinklar för krav så är det risk att samma krav uttrycks på flera olika sätt.
      - För att tillmötesgå att intressenter använder olika språk när de uttrycker sig så bör så många varianter av dessa uttryck som möjligt tas med i kraven.
      - Vid kravprioritering så är alltid slutanvändarens önskemål viktigast.
      - Krav kan inte valideras förrän systemet är implementerat.
    correct:
      - 0
      - 1
      - 2
    categories:
      - kravhantering 
    source: 'DA335A-T20210812Q03'
  - content: |
      # Kravhantering: Vad är korrekta påståenden gällande krav och kravhantering?
    image: null
    options:
      - Icke-funktionella krav är ofta mer kritiska för produkten är funktionella krav.
      - Om inte alla basic needs är uppfyllda så kan detta kompenseras genom uppfyllda performance needs enligt Kano-modellen.
      - Ett funktionellt krav kan inte samtidigt vara ett domänkrav.
      - Ett krav kan inte beskriva vad ett system inte ska göra utan endast vad det ska göra.
      - Krav grupperas bäst i den ordning kraven uppstår.
      - Att ett krav har spårbarhet bakåt innebär exempelvis att man kan säga från viken källa ett krav kommer.
    correct:
      - 0
      - 5
    categories:
      - kravhantering
    source: 'DA335A-T20210812Q04'
  - content: |
      # Kravdokumentation: Vad är korrekta påståenden gällande kravdokumentation?
    image: null
    options:
      - Bra kravdokumentation ska kunna tillgodose flera olika intressenters tekniska kunskapsnivå och kunna skapa en förståelse för kraven på flera olika nivåer.
      - Ett kravdokument blandar inte olika former för att dokumentera krav.
      - Ett kravdokument bör beskriva en komplett lösning på kundens problem.
      - Ett kravdokument bör låsas (bestämma att inga ändringar sker) så tidigt som möjligt i projektet för att underlätta för kommande faser.
      - Krav bör ges ett id-nummer som motsvarar den ordning kraven identifierades i.
      - Validering av krav kan innebära att kontrollera så att kraven är spårbara, realistiska och kompletta.
    correct:
      - 0
      - 5
    categories:
      - kravdokumentation
    source: 'DA335A-T20210812Q05'
  - content: |
      # Arkitektur: Vad är korrekta påståenden gällande arkitektur och mjukvaruutveckling?
    image: null
    options:
      - Arkitekturen är ointressant att diskutera med andra intressenter än utvecklare.
      - Den logiska vyn av en arkitektur innebär att bedöma om logiken i koden fungerar.
      - Den fysiska vyn av en arkitektur handlar om att identifiera vilken del av mjukvaran som exekverar på vilken hårdvara i systemet.
      - En datacentrerad-arkitektur (repository) är sårbar då datacentret blir en så kallad single point-of-failure.
      - En lagerarkitektur stöder kvalitetsegenskapen säkerhet men på bekostnad av prestanda.
      - Alla system har en arkitektur.
    correct:
      - 2
      - 3
      - 4
      - 5
    categories:
      - arkitektur 
    source: 'DA335A-T20210812Q06'
  - content: |
      Vad är korrekta påståenden gällande metrics/mätvärden?
    image: null
    options:
      - En indikator är alltid ett direkt mätvärde.
      - En bra metrics värde förhåller sig relativt till den egenskap som mäts. Ökar värdet så ökar graden av egenskapen.
      - Genom att räkna antalet anrop från en funktion eller metod samt hur många andra funktioner eller metoder som anropar den första funktionen/metoden så kan man få ett mått på kopplingen (coupling) i ett (del-)system.
      - Vi vill sträva efter låg koppling (coupling) och hög sammanhållning (cohesion) i kod.
      - Mätvärden kan användas för att säga något om ett nuvarande tillstånd eller för att försöka förutsäga något om en framtida situation.
      - McCabes Cyklomatiska kompexitet ger ett mått på kopplingen mellan två moduler i ett system.
    correct:
      - 1
      - 2
      - 3
      - 4
    categories:
      - metrics
    source: 'DA335A-T20210812Q07'
  - content: |
      # Software Engineering: Vad är korrekta påståenden gällande Software Engineering och mjukvarusystem?
    image: null
    options:
      - Ett socio-tekniskt system inkluderar människorna som använder det.
      - Inom Software Engineering så är det viktigt att förstå behov innan man formulerar en lösning.
      - Legacy systems bör alltid bytas ut så snart som möjligt.
      - Socio-tekniska system blir sällan legacy systems.
      - Software Engineering styrs av fysiska lagar som sätter gränser för hur utvecklingen av mjukvara sker.
      - Det finns inga generella orsaker till att många mjukvaruprojekt har svårigheter; Alla svårigheter är unika för varje projekt.
    correct:
      - 0
      - 1
    categories:
      - software-engineering
    source: 'DA335A-T20210812Q08'
  - content: |
      # Design och implementation: Vad är korrekta påståenden gällande design och implementation av mjukvara?
    image: null
    options:
      - Refactoring innebär att skriva om kod med syfte att öka kodens kvalitet i avseende på exempelvis hur lätt koden är att underhålla (maintainability).
      - Kommentarer av typen markers bör raders i koden så snart som möjligt eller undvikas helt.
      - Att det förekommer många långa variabelnamn är en orsak till att undersöka om refactoring behövs.
      - Det huvudsakliga syftet med coding guidelines bör vara att optimera kodens effektivitet.
      - En orsak till att överväga om refactoring behövs är att samma kodstycke om flera rader upprepas ofta i samma syfte.
      - \"Feature envy\" är en orsak till att undersöka om refactoring behövs.
    correct:
      - 0
      - 1
      - 4
      - 5
    categories:
      - design-och-implementation
    source: 'DA335A-T20210812Q09'
  - content: |
      # Kvalitetshantering: Vad är korrekta påståenden gällande kvalitetshantering?
    image: null
    options:
      - Correctness innebär hur lätt det är att verifiera att programmet uppfyller den avsedda funktionen.
      - Kvalitet för en produkt uppnås bäst om en separat grupp ansvarar för att genomföra åtgärder som ökar kvalitén på befintliga artefakter.
      - Interoperability beskriver hur lätt det är att överföra programmet från en hårdvara och/eller mjukvarusystem till ett annat.
      - Standarder för kvalitet och kvalitetskategoriseringar så som ISO 9126 eller McCall’s Quality Factors är en hjälp i kvalitetsarbetet då de anger hur man ska gå tillväga för att öka kvalitet inom exempelvis maintainability eller usability.
      - Inom ”prevention costs” så ingår kostnader för att genomföra testning för att förhindra att mjukvara släpps med kända buggar. 
      - Kvalitet innebär att kompromissa mellan perfektion och kostnader.
    correct:
      - 5
    categories:
      - kvalitetshantering
    source: 'DA335A-T20210812Q10'
  - content: |
      - SPI: Vad är korrekta påståenden om SPI/processförbättring/Software Process Improvement?
    image: null
    options:
      - Att definiera användbara metrics/mätvärden är en viktig del av SPI.
      - Träning är en väsentlig del av Software Process Improvement.
      - Det är viktigt att avgöra vilken mognadsgrad en organisation har för att kunna avgöra vilken typ av förbättringar som är rimliga att försöka genomföra.
      - Där existerar ett samband mellan process och produkt som innebär att en förbättring av processen innebär en förbättring av produkten.
      - SPI är en iterativ process.
      - För att SPI ska kunna bedrivas effektivt så måste detta ses som en investering på lång sikt av organisationen som helhet.
    correct:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
    categories:
      - software-process-improvement
    source: 'DA335A-T20210812Q11'
  - content: |
      # Mjukvarutestning Integrationstest: Vilken/vilka av följande påståenden förklarar begreppet integrationstest korrekt?
    image: null
    options:
      - Det är en fas i utvecklingsprocessen i vilken individuella mjukvarukomponenter kombineras och testas tillsammans.
      - Det är en fas i utvecklingsprocessen som testar hur mjukvaran beter sig under stress.
      - Det är en fas i utvecklingsprocessen som testar hur mjukvaran beter sig under last.
      - Det är en fas i utvecklingsprocessen där buggar upptäcks i ett (sammansatt, men inte komplett) system.
      - Det är en fas utvecklingsprocessen man brukar använda sist innan produkten levereras.
      - Inmatning av icke-valida värden är ett sätt att hitta defekter i ett program.
    correct:
      - 1
      - 3
    categories:
      - testning
    source: 'DA335A-T20210812Q12'
  - content: |
      # Mjukvarutestning allmänt: Vilka är de vanligaste skälen till att testa mjukvara?
    image: null
    options:
      - Att visa att programmet fungerar.
      - Då det är vanligast att felen introduceras under implementationsfasen, måste man testa för att hitta defekterna.
      - Att bedöma om programmet har tillräcklig kvalitet för att släppas till marknaden.
      - Att hitta så manga defekter som möjligt innan programmet släpps till marknaden.
      - Att ge ett underlag till ett risk-baserat beslut om programmet skall släppas eller inte.
      - Att visa för övriga delar av projektet att testteamet göra ett bra jobb.
    correct:
      - 2
      - 3
      - 4
    categories:
      - testning
    source: 'DA335A-T20210812Q13'
  - content: |
      # Mjukvarutestning Unit-test: Vilket/vilka av följande påstående är korrekt om Unit test?
    image: null
    options:
      - Ett unit test på en hemsida kan innebära att man frågar en användare om de förstår hur man loggar in på hemsidan.
      - Ett unit test på ett komplett system är att jämföra om systemet uppfyller kundens krav.
      - Unit test är ett annat ord för “black­box” testning.
      - Unit test innebär att man testar ett systems minsta exekverbara kod isolerat.
      - Ett unit test kan innebära att man testar en ihopsatt komponent, bestående av flera klasser, som inte kan exekvera individuellt. 
      - Ett unit test kan innebära att man testar om två olika klasser, som testats individuellt, fungerar tillsammans i systemet. 
    correct:
      - 3
      - 4
    categories:
      - testning
    source: 'DA335A-T20210812Q14'
  - content: |
      # Mjukvarutestning allmänt: Vilket/vilka av nedanstående påståenden om testning stämmer?
    image: null
    options:
      - ”Brute-force” testning används ofta då det är en snabb genväg och metoden testar ”allt”. 
      - ”Ad-hoc” testning är väldigt strukturerad och följer en angiven plan. 
      - Vid statisk testning behöver man inte köra någon kod. 
      - Med tillräckligt noggrann testning kan man undvika alla typer av fel i framtiden. 
      - Verifikation innebär att man kontrollerar att man bygger produkten rätt. 
      - Validering innebär att man kontrollerar att man bygger rätt produkt.
    correct:
      - 2
      - 4
      - 5
    categories:
      - testning 
    source: 'DA335A-T20210812Q15'
