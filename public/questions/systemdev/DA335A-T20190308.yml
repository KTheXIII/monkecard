version: '0.0.0'

datas:
  - content: |
      # Risk-based testing: Vad stämmer in på risk-baserad testning?
    image: null
    options:
      - Den grundläggande idén är att hitta de viktiga buggarna först.
      - Den grundläggande idén är hitta så många buggar som möjligt under en definierad tidsperiod (”time box”)
      - För att få ut hur hög risk ett möjligt problem kan innebära, dividera sannolikheten med konsekvensen.
      - Höga risk-nummer innebär att det behövs omfattande testning för den funktionen eller det möjliga problemet.
      - Risk baserad testning är bara användbart när det är tydligt vilka problem som finns i systemet. 
      - Risk baserad testning används bara för att visa cheferna att allt fungerar som det ska.
    correct:
      - 0
      - 3
    categories:
      - risk-based-testing
    source: 'DA335A-T20190308Q01'
  - content: |
      # Testning: Vilka påstående är korrekta om White-box testning och Black-box testning?
    image: null
    options:
      - För Black-box testning krävs kunskap om kod och struktur 
      - Endast programmerare kan utföra en Black-box testning 
      - Med White-box-testning bygger man kunskap om hur indata påverkar vilken del av koden som körs.  
      - White-box testning testar källkoden för att garantera att inga fel kan uppstå vid ett senare tillfälle 
      - En fördel med Black-box-testning är att kod alltid måste finnas tillhands 
      - Kod måste finnas tillgänglig för att utföra en White-box-testning 
    correct:
      - 2
      - 5
    categories:
      - testning
    source: 'DA335A-T20190308Q02'
  - content: |
      # Code coverage: Vilka av följande påståenden är korrekta för code coverage?
    image: null
    options:
      - Code Coverage kan användas för att se vilka delar i din funktion/program som faktiskt körs. 
      - Code coverage är ett mått på hur mycket av din kod som exekveras, beroende på vilka tester som körs. 
      - Ett program med hög code coverage är mer noggrant testat och har en lägre sannolikhet att innehålla programvarufel än ett program med låg code coverage.
      - Det finns flera olika sätt att mäta Code coverage på, ett exempel är branch coverage. 
      - Path coverage innebär att man testa att varje distinkt väg genom koden exekveras minst en gång inom testet. 
      - 100 % code coverage innebär att allt i ditt program fungerar felfritt.
    correct:
      - 0
      - 1
      - 2
      - 3
      - 4
    categories:
      - code-coverage
    source: 'DA335A-T20190308Q03'
  - content: |
      # Testning: Hitta rätt ord/begrepp, som passar på de 3 platserna (i rätt ordning) i meningarna (flera alternativ kan passa):
    image: null
    options:
      - Ord1=Failure,   Ord2=Defect,  Ord3=Error
      - Ord1=Failure,   Ord2=Error,   Ord3=Defect
      - Ord1=Failure,   Ord2=Fault,   Ord3=Error
      - Ord1=Defect,    Ord2=Error,   Ord3=Failure
      - Ord1=Error,     Ord2=Failure, Ord3=Fault
      - Ord1=Error,     Ord2=Defect,  Ord3=Failure
    correct:
      - 0
      - 2
    categories:
      - testning
    source: 'DA335A-T20190308Q04'
  - content: |
      # Implementation: Vilka av följande påståenden gällande implementation av mjukvara är korrekta?
    image: null
    options:
      - En orsak till att överväga om refactoring behövs är att samma kodstycke om flera rader upprepas ofta i samma syfte.
      - Hög koppling (coupling) för en modul kan göra det svårare att återanvända den här koden.
      - Hög cohesion för en modul kan göra det svårare att återanvända den är koden.
      - Kommentarer av typen markers bör raders i koden så snart som möjligt eller undvikas helt.
      - Riktlinjer för kod (coding guidelines) bör innehåll information om hur filer/klasser bör namnges.
      - Content coupling är en typ av koppling som bör undvikas.
    correct:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
    categories:
      - implementation
    source: 'DA335A-T20190308Q05'
  - content: |
      # Processmodeller: Vilka av följande påståenden gällande inkrementella processer är korrekta?
    image: null
    options:
      - Med en inkrementell process så finns det en risk att helhetsgreppet om arkitekturen går förlorat.
      - Inkrementella processmodeller är alltid också iterativa 
      - Inkrementella processer är speciellt lämpade för projekt med ostabila krav.
      - Inkrementella processer lämpar sig väl om man har svårt att involvera slutanvändare eller kund i arbetet.
      - Inkrementella processer lämpar sig väl för stora organisationer med utförliga management-processer.
      - Inkrementella processer kan användas med en stor release när alla delar är klara eller med flera mindre releaser.
    correct:
      - 0
      - 1
      - 2
      - 5
    categories:
      - processmodeller
    source: 'DA335A-T20190308Q06'
  - content: |
      # Evolution: Vilka av följande påståenden gällande legacy systems är korrekta?
    image: null
    options:
      - Med legacy system så är det lätt att specificera ett helt nytt system.
      - Legacy systems bör alltid bytas ut så snart som möjligt.
      - Re-engineering innebär att förbättra ett legacy system med avseende på hur enkelt det är att underhålla detta.
      - Socio-tekniska system blir sällan legacy systems.
      - I ett legacy system så ingår endast kod.
      - I ett legacy system så är det i allmänhet lätt att separera processer som använder systemet från själva systemet.
    correct:
      - 2
    categories:
      - evolution
    source: 'DA335A-T20190308Q07'
  - content: |
      # Software Engineering: Vilka av följande påståenden gällande Software Engineering är korrekta?
    image: null
    options:
      - Software Enginering handlar idag i stort om hur vi löser samma frågor som man brottades med på 80-talet.
      - Det finns inga generella orsaker till att många mjukvaruprojekt har svårigheter; Alla svårigheter är unika för varje projekt.
      - För små projekt så är det inte lönsamt att tillämpa metoder som faller under konceptet Software Engineering.
      - Metoder för Software Engineering fokuserar på hur vi skriver kod.
      - Software Engineering innebär en delmängd av det som ingår i Systems Enginering.
      - Med Software Engineering så kommer antalet fel i en mjukvara att hållas på en konstant nivå efter release av den första versionen.
    correct:
      - 0
      - 4
    categories:
      - software-engineering
    source: 'DA335A-T20190308Q08'
  - content: |
      # Kravhantering: Vilka av följande påståenden gällande krav och kravhantering är korrekta?
    image: null
    options:
      - Krav ska alltid förses med ett unikt ID.
      - Vid kravprioritering så är alltid slutanvändarens önskemål viktigast.
      - Att ett krav har spårbarhet bakåt innebär exempelvis att man kan säga från viken källa ett krav kommer.
      - Validering av krav kan göras genom prototyping.
      - Krav kan dokumenteras med olika typer av diagram.
      - En motivering till ett krav är en text som förtydligar varför kravet är formulerat på ett speciellt sätt och med vissa restriktioner eller specifika värden.
    correct:
      - 0
      - 2
      - 3
      - 4
      - 5
    categories:
      - kravhantering
    source: 'DA335A-T20190308Q09'
  - content: |
      # Software Process Improvement

      ## Vilka av följande påståenden gällande Software Process Improvement är korrekta?
    image: null
    options:
      - Små organisationer har ingen nytta av SPI.
      - Det är viktigt att avgöra vilken mognadsgrad en organisation har för att kunna avgöra vilken typ av förbättringar som är rimliga att försöka genomföra.
      - För att ha en effektiv SPI-process så bör flera ändringar genomföras samtidigt.
      - Att utbilda och träna personal är en viktig del av SPI.
      - SPI innebär att en certifiering sker vid ett specifikt tillfälle av en utomstående organisation.
      - Att identifiera användbara mätvärden är en viktig del av SPI.
    correct:
      - 1
      - 3
      - 5
    categories:
      - software-process-improvement
    source: 'DA335A-T20190308Q10'
  - content: |
      # : Arkitektur: Vilka av följande påståenden gällande arkitektur är korrekta??
    image: null
    options:
      - Den logiska vyn av en arkitektur innebär att bedöma om logiken i koden fungerar.
      - Processvyn av en arkitektur ser till vilka delar av utvecklingsprocessen som handlar om arkitektur.
      - Den fysiska vyn av en arkitektur handlar om att identifiera vilken del av mjukvaran som exekverar på vilken hårdvara i systemet.
      - Alla system har en arkitektur.
      - Arkitekturen är ointressant att diskutera med andra intressenter än utvecklare.
      - Olika mönster för arkitektur bör inte kombineras med varandra utan man bör renodla arkitekturen så hårt som möjligt efter ett specifikt mönster.
    correct:
      - 2
      - 3
    categories:
      - arkitektur
    source: 'DA335A-T20190308Q11'
