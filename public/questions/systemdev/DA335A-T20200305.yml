version: '0.0.0'

datas:
  - content: |
      # Software Engineering: Vilka påståenden är korrekta gällande diagrammet nedan?
    image:
      source: './questions/systemdev/images/reliability-curve-of-software.jpg'
      alt: Show reliability curve under a software development
    options:
      - Spikarna i kurvan indikerar att testfasen i den använda processen
        startar vid punkt 2.
      - Kurvan markerad med 4 visar den ideala kurvan för en mjukvaruprodukt.
      - Software Engineering innebär att använda metoder i en strävan att få
        kurva 3 att närma sig det utseende som kurva 4 har.
      - Siffran 3 markerar en kurva som indikerar att en mjukvaruprodukt har
        dålig kvalitet.
      - Spikarna i kurvan beror alltid på att något förändrats i
        mjukvaruproduktens kod eller i produktens omgivning.
      - Kurva 4 är samma kurva som man kan påvisa för hårdvara.
    correct:
      - 1
      - 2
      - 4
    categories:
      - software-engineering
    source: 'DA335A-T20200305Q01'
  - content: |
      # Processmodeller: Vad är korrekta påståenden gällande iterativa processer?
    image: null
    options:
      - Iterationerna i en iterativ process beskrivs av V-modellen.
      - En iterativ process innebär också att man alltid levererar
        inkrementellt.
      - Spiralmodeller är en typ av iterativa processer.
      - I en iterativ process så måste koden innehålla en viss mängd loopar.
      - Iterativa processer är i sin natur dokumenttunga.
      - I en iterativ process så upprepas alltid något steg någon gång.
    correct:
      - 2
      - 5
    categories:
      - processmodeller
      - iterativa-processer
    source: 'DA335A-T20200305Q02'
  - content: |
      # Agila processmodeller: Vad är korrekta påståenden om agila processer och prodessmodeller?
    image: null
    options:
      - Agila processmodeller lämpar sig inte för projekt som spänner över
        långa perioder så som ett eller flera år.
      - Agila processmodeller är alltid iterativa.
      - Agila processmodeller fungerar bra i kombination med en traditionell
        linjestyrning då denna går på tvären mot en projektorganisation.
      - Disciplin hos utvecklarna är en viktig del i aglia processmodeller.
      - XP kan ha svårt att hantera kvalitativa krav utan utökning av
        processmodellen.
      - Scrum och Kanban är två agila processmodeller som lämpar sig att
        kombinera med varandra.
    correct:
      - 1
      - 3
      - 4
      - 5
    categories:
      - processmodeller
      - agila-processmodeller
      - agila-processer
    source: 'DA335A-T20200305Q03'
  - content: |
      # Agila processmodeller: Vilka påståenden om agila processer är korrekta enligt diagrammet nedan samt generellt?
    image:
      source: './questions/systemdev/images/agile-vs-tradtional-process.jpg'
    options:
      - För projekt som tar långt tid så kan kostnaden för traditionella
        processer öka mycket kraftigt med tiden medan agila processer ger en mer
        stabil kostnad över tiden.
      - Agila processer kan vara mer kostsamma är traditionella processer för
        projekt som spänner över mycket lång tid.
      - Agila processer existerade i praktiken långt innan uttrycket agila
        processer blev vanligt som benämning i början av 2000-talet.
      - Den initiala kostnaden för agila processmodeller består i att försöka
        förstå alla krav så väl som möjligt innan man fortsätter och det är
        detta som sedan håller ner kurvan för kostnad i agila projekt
      - Med agila processer så spelar utvecklarnas kommunikationsförmåga mindre
        roll än i traditionella metoder.
      - Agila processer kräver mycket lite disciplin av utvecklarna vilket
        innebär stor flexibilitet.
    correct:
      - 0
      - 2
    categories:
      - processmodeller
      - agila-processmodeller
      - agila-processer
    source: 'DA335A-T20200305Q04'
  - content: |
      # Kravhantering: Vad är korrekta påståenden gällande krav och kravhantering?
    image: null
    options:
      - Krav kan inte valideras förrän systemet är implementerat.
      - Ett krav kan vara ett domänkrav och ett kvalitativt krav samtidigt.
      - Det kan vara nödvändigt att dokumentera spårbarhet mellan olika krav.
      - Ett kravdokument bör innehålla så lite information om produktens design
        som möjligt.
      - Kravvalidering kan innebära att avgöra om kraven är kompletta och
        konsistenta.
      - För att tillmötesgå att intressenter använder olika språk när de
        uttrycker sig så bör så många varianter av dessa uttryck som möjligt tas
        med i kraven.
    correct:
      - 1
      - 2
      - 3
      - 4
    categories:
      - requirements-analysis
    source: 'DA335A-T20200305Q05'
  - content: |
      # Kravhantering: Vad är korrekta påståenden om användningsfall/use cases?
    image: null
    options:
      - Användningsfall är lämpliga att använda för att kommunicera med
        användare om hur systemet ska fungera.
      - Konceptet ”include” används för att visa att ett
        användningsfall/use-case A alltid innebär att ytterligare något annat
        användningsfall B genomförs om A utförs.
      - Ett användningsfallsdiagram/use-case-diagram beskriver flödet mellan
        olika funktioner i ett system.
      - Ett scenario ska endast ge översiktlig information om hur något utförs
        för att inte begränsa utvecklaren när det gäller design av systemet.
      - Användningsfallen ger en direkt mappning mot funktioner/metoder i koden.
      - Användningsfall kan inte visa alternativa varianter av en funktion.
    correct:
      - 0
      - 1
    categories:
      - requirements-analysis
      - use-case
    source: 'DA335A-T20200305Q06'
  - content: |
      # Arkitektur: Vilka påståenden gällande arkitektur är korrekta?
    image: null
    options:
      - Det går att bygga system utan arkitektur.
      - Att se arkitektur ut en process-synvinkel innebär att anpassa
        arkitekturen utifrån den processmodell som används för att utveckla en
        mjukvaruprodukt.
      - Referensarkitekturer används för att visa mönster för lämplig arkitektur
        för en viss typ av system.
      - När man utformar en arkitektur för ett system så är de funktionella
        kraven det viktigaste att ta hänsyn till.
      - Den fysiska vyn av en arkitektur visar på vilken hårdvara olika delar av
        mjukvaran exekverar (för ett distribuerat system).
      - Den logiska vyn av arkitekturen visar vilka algoritmer som finns i
        systemet och hur dessa fungerar.
    correct:
      - 2
      - 4
    categories:
      - arkitektur
    source: 'DA335A-T20200305Q07'
  - content: |
      # Implementation: Vilka påståenden gällande implementation av mjukvara är korrekta?
    image: null
    options:
      - En bra implementation bör ha hög maintainability.
      - En bra implementation bör ha låg traceability/spårbarhet.
      - Det huvudsakliga syftet med coding guidelines bör vara att optimera
        kodens effektivitet.
      - ”Inappropriate intimacy” är en orsak till att undersöka om refactoring
        behövs.
      - ”Data coupling” är en orsak till att undersöka om refactoring behövs.
      - ”Markers” är en typ av kommentarer som ger information relaterad till
        utvecklingsprocessen eller tillstånden hos koden. 
    correct:
      - 0
      - 3
      - 5
    categories:
      - implementation
    source: 'DA335A-T20200305Q08'
  - content: |
      # Kvalitetshantering: Vilka påståenden gällande kvalitet och kvalitetssäkring/Quality Assurance av mjukvara är korrekta?
    image: null
    options:
      - Kvalitet för en produkt uppnås bäst om en separat grupp ansvarar för att
        genomföra åtgärder som ökar kvalitén på befintliga artefakter. 
      - Inom mjukvaruutveckling så har man observerat ett samband mellan
        kvalitet på process och kvalitet på produkt men man har inte definierat
        exakt hur detta samband fungerar.
      - Standarder för kvalitet och kvalitetskategoriseringar så som ISO 9126
        eller McCall’s Quality Factors är en hjälp i kvalitetsarbetet då de
        anger hur man ska gå tillväga för att öka kvalitet inom exempelvis
        maintainability eller usability.
      - Inom ”prevention costs” så ingår kostnader för att genomföra testning
        för att förhindra att mjukvara släpps med kända buggar.
      - Verifiering innebär exempelvis att kontrollera att de krav man
        identifierat stämmer med användarens verkliga behov.
      - Så kallade ”failure costs” kan delas in i ”internal failure costs” och
        ”external failure costs”.
    correct:
      - 1
      - 5
    categories:
      - kvalitetshantering
    source: 'DA335A-T20200305Q09'
  - content: |
      # Riskbaserad testning: Vilken/Vilka är den/de grundläggande idén/idéerna för en riskbaserad strategi?
    image: null
    options:
      - Planera omfattande tester där riskerna är störst.
      - Se till så att riskerna ”slår in”, som ett sätt att generera testfall
      - Hitta de viktiga buggarna först.
      - Planera få tester för att undvika risker.
      - Verifiera alla krav i kravdokumentet, för att minimera riskerna.
      - Risker används som ett alternativ till kravdokument.
    correct:
      - 0
      - 2
    categories:
      - risk-based-testing
      - testning
    source: 'DA335A-T20200305Q10'
  - content: |
      # Integrationstest: Vilken/vilka av följande påståenden förklarar begreppet integrationstest korrekt?
    image: null
    options:
      - Det är en fas i utvecklingsprocessen i vilken individuella
        mjukvarukomponenter kombineras och testas tillsammans.
      - Det är en fas i utvecklingsprocessen som testar hur mjukvaran beter sig
        under stress.
      - Det är en fas i utvecklingsprocessen som testar hur mjukvaran beter sig
        under last. 
      - Det är en fas i utvecklingsprocessen där buggar upptäcks i ett (mer
        eller mindre komplett) system.
      - Det är en fas utvecklingsprocessen man brukar använda sist innan
        produkten levereras.
      - Det är en fas utvecklingsprocessen där man inte behöver testa systemet.
    correct:
      - 0
      - 3
      - 5
    categories:
      - integrationstest
      - testning
    source: 'DA335A-T20200305Q11'
  - content: |
      # Testning: Vilket/vilka av nedanstående påståenden stämmer?
    image: null
    options:
      - Komponent-testning bör göras med “black-box”-tekniker och Systemtestning
        bör göras med “white-box”- tekniker. 
      - Om man hittar få fel under testning kan detta vara ett tecken på att det
        testade programmet har bra kvalitet, men kan också vara ett tecken på
        att testningen inte är bra.
      - En nackdel med ”coverage”-baserad testning är att man måste ha tillgång
        till koden.
      - Unit testing innebär testning av stora system.
      - All pairs är en testmetod för kombinationer av indata.
      - Inmatning av icke-valida värden är ett sätt att hitta defekter i ett
        program.
    correct:
      - 1
      - 2
    categories:
      - testning
    source: 'DA335A-T20200305Q12'
  - content: |
      # Granskning: Vilken/Vilka svarsalternativ (A-F) nedan passar bäst beträffande kopplingen mellan följande påståenden (1-5) och granskningsmetoder (s-v)?

      1. led by author
      2. undocumented
      3. no management participation
      4. led by a trained moderator or leader
      5. uses checklists

      s) inspection

      t) peer review

      u) informal review

      v) walkthrough
    image: null
    options:
      - s = 4, t = 3, u = 2 and 5, v = 1
      - s = 4 and 5, t = 3, u = 2, v = 1
      - s = 1 and 5, t = 3, u = 2, v = 4
      - s = 5, t = 4, u = 3, v = 1 and 2
      - s = 4 and 5, t = 1, u = 2, v = 3
      - s = 1, t = 3, u = 2, v =1 and 5
    correct:
      - 1
    categories:
      - granskning
    source: 'DA335A-T20200305Q13'
