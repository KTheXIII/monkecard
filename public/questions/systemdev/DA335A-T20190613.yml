version: '0.0.0'

datas:
  - content: |
      # Testning: Vilka är de vanligaste skälen till att testa mjukvara?
    image: null
    options:
      - Att visa att programmet fungerar.
      - Då det är vanligast att felen introduceras under implementationsfasen, måste man testa för att hitta defekterna.
      - Att bedöma om programmet har tillräcklig kvalitet för att släppas till marknaden.
      - Att hitta så manga defekter som möjligt innan programmet släpps till marknaden.
      - Att ge ett underlag till ett risk-baserat beslut om programmet skall släppas eller inte. 
      - Att visa för övriga delar av projektet att testteamet göra ett bra jobb.
    correct:
      - 2
      - 3
      - 4
    categories:
      - testning
    source: 'DA335A-T20190613Q01'
  - content: |
      # Testning: Vilka av följande påståenden är sanna?
    image: null
    options:
      - Komponent-testning bör göras med “black-box”-tekniker och Systemtestning bör göras med “white-box”- tekniker. 
      - Om man hittar få fel under testning kan detta vara ett tecken på att det testade programmet har bra kvalitet, men kan också vara ett tecken på att testningen inte är bra.
      - En nackdel med ”coverage”-baserad testning är att man måste ha tillgång till koden.
      - Unit testing innebär testning av stora system.
      - All pairs är en testmetod för kombinationer av indata.
      - Inmatning av icke-valida värden är ett sätt att hitta defekter i ett program.
    correct:
      - 1
      - 2
      - 4
      - 5
    categories:
      - testning
    source: 'DA335A-T20190613Q02'
  - content: |
      # Testning: Vilken/vilka av följande påståenden förklarar begreppet integrationstest korrekt?
    image: null
    options:
      - Det är en fas i utvecklingsprocessen i vilken individuella mjukvarukomponenter kombineras och testas tillsammans.
      - Det är en fas i utvecklingsprocessen som testar hur mjukvaran beter sig under stress. 
      - Det är en fas i utvecklingsprocessen som testar hur mjukvaran beter sig under last. 
      - Det är en fas i utvecklingsprocessen där buggar upptäcks i ett (mer eller mindre komplett) system.
      - Det är en fas utvecklingsprocessen man brukar använda sist innan produkten levereras. 
      - Det är en fas utvecklingsprocessen där man inte behöver testa systemet. 
    correct:
      - 0
      - 3
    categories:
      - testning
    source: 'DA335A-T20190613Q03'
  - content: |
      # Software Engineering: Vilka av påståendena om socio-tekniska system nedan är korrekta?
    image: null
    options:
      - Ett socio-tekniskt system inkluderar människorna som använder det.
      - Ett Socio-tekniskt system är icke-deterministiskt.
      - Ett socio-teknisk systems nytta beror främst på dess tekniska kvalitet.  
      - Socio-tekniska system påverkas inte av lagar utan av hur människor gemensamt använder systemet och därmed definierar det.
      - Ett socio-tekniskt system har så kallade ”emergent properties”. 
      - För socio-tekniska system så är gränsen mellan systemet och omgivningen tydlig.
    correct:
      - 0
      - 1
      - 4
    categories:
      - software-engineering 
    source: 'DA335A-T20190613Q04'
  - content: |
      # Processmodeller: Vad är korrekta påståenden gällande processmodeller och processer för mjukvara?
    image: null
    options:
      - En process och en processmodell är samma sak.
      - Alla processmodeller tar inte hänsyn till alla aspekter av mjukvaruutveckling.
      - En bra process har en låg kostnad för genomförande och en låg tröskel för inlärning.
      - En processmodell bör beskriva alla aktiviteter med en hög nivå av detaljer. 
      - Olika grundmodeller för processer kan användas för olika delar i samma projekt. 
      - En processmodell bör anpassas efter organisationens eller projektets behov.
    correct:
      - 1
      - 4
      - 5
    categories:
      - processmodeller
    source: 'DA335A-T20190613Q05'
  - content: |
      # Agila processmodeller: Vad är korrekta påståenden om Scrum?
    image: null
    options:
      - Scrum är en lämplig processmodell om kraven är oklara/otydliga. 
      - Product backlog och sprint backlog är två viktiga dokument i Scrum.
      - Processförbättring är en del av processen som beskrivs i Scrum.
      - Scrum fungerar inte att använda i stora organisationer.
      - I Scrum så utformas först en övergripande projektplan med planerade milstolpar och releaser.
      - Scrum innehåller detaljerade riktlinjer för kodstandarder som en del av konceptet med gemensamt ägande av koden.
    correct:
      - 0
      - 1
      - 2
      - 4
    categories:
      - agila-processmodeller
    source: 'DA335A-T20190613Q06'
  - content: |
      # Kravhantering: Vilka av alternativen nedan är rimligtvis intressenter/stakeholders i ett mjukvaruutvecklingsprojekt?
    image: null
    options:
      - De som är slutanvändare av produkten.
      - Alla som arbetar i organisationen som utvecklar produkten.
      - Utvecklarna av produkten 
      - Kunden som betalar för utvecklingen av produkten (kan vara samma organisation som utvecklar produkten) 
      - Konkurrerande organisation som utvecklar liknande produkt.
      - Underleverantör till den utvecklande organisationen. 
    correct:
      - 0
      - 2
      - 3
    categories:
      - kravhantering
    source: 'DA335A-T20190613Q07'
  - content: |
      # Arkitektur: Vad är korrekta påståenden om arkitekturmönster?
    image: null
    options:
      - En lagerarkitektur stöder kvalitetsegenskapen säkerhet men på bekostnad av prestanda.
      - En Model-View-Controller-arkitektur kan vara onödigt komplicerad för ett enkelt system.
      - En datacentrerad-arkitektur (repository) är sårbar då datacentret blir en så kallad single point-of-failure.
      - En styrka hos en klient-server-arkitektur är att den stöder en distribuerad arkitektur för att minska systemets sårbarhet. 
      - I en pipe-and-filter-arkitektur så är det ofta svårt att byta ut och återanvända filter.
      - Event-drivna-arkitekturer är lämpade för moderna GUI.
    correct:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
    categories:
      - arkitektur
    source: 'DA335A-T20190613Q08'
  - content: |
      # Implementation: Vilka påståenden gällande coupling och cohesion är korrekta?
    image: null
    options:
      - Vi vill sträva efter cohesion av typen ”logical”.
      - Vi vill sträva efter coupling av typen  ”control”.
      - Det är bra med hög coupling.
      - Det är bra med hög cohesion.
      - Om vi ökar cohesion i ett systems moduler så minskar vi sannolikt graden av coupling i systemet. 
      - Coupling och cohesion är endast relevant i objektorienterade system.
    correct:
      - 3
    categories:
      - implementation
    source: 'DA335A-T20190613Q09'
  - content: |
      # Configuration Management: Vilka påståenden gällande configuration management är korrekta?
    image: null
    options:
      - Configuration management hanterar endast kod-filer.
      - Inom configuration management så ingår att hålla reda på hur olika filer inom två eller flera olika codelines kan förhålla sig till varandra.
      - Branch innebär att dela en baseline i två olika mainlines. 
      - Merge innebär att förena två olika mainlines till en.
      - En build innebär att skapa ett exekverbart system utifrån en viss baseline.
      - Bibliotek och externa komponenter ingår inte i configuration management.
    correct:
      - 1
      - 4
    categories:
      - configuration-management
    source: 'DA335A-T20190613Q10'
  - content: |
      # Metrics: Vilka påståenden gällande metrics är korrekta?
    image: null
    options:
      - En metric av typen indicator valideras inte empiriskt. 
      - En control metric visar hur bra uppfattning man har om kodens kvalitet.
      - En predictor metric representerar någon egenskap hos produkten.
      - Dynamiska metrics kan sägas ha en indirekt koppling till kvalitet. 
      - Metrics kan endast användas för att säga något om ett nuvarande tillstånd hos en produkt eller ett projekt.
      - En bra metric har ett värde som ökar och minskar i relation till den egenskap som mäts.
    correct:
      - 2
      - 5
    categories:
      - metrics
    source: 'DA335A-T20190613Q11'
  - content: |
      # Riskhantering: Vilka påståenden gällande riskhantering är korrekta?
    image: null
    options:
      - En projektrisk påverkar direkt kvalitén på det som projektet producerar.
      - Det är viktigt att om möjligt koppla risker till indicator metrics.
      - Risker bär alltid utvärderas i de två dimensionerna kostnad och påverkan.
      - En identifierad risk bör kopplas samman med någon handlingsplan för vad man gör om risken inträffar.
      - Risker bör övervakas genom hela projektet.
      - Att prioritera risker är inte meningsfullt då alla risker kan eskalera och påverka mer än bara sin ursprungliga kategori. 
    correct:
      - 1
      - 3
      - 4
    categories:
      - riskhantering
    source: 'DA335A-T20190613Q12'
  - content: |
      # Projektplanering: Vilka påståenden gällande projektplanering är korrekta?
    image: null
    options:
      - Man kan behöva göra flera work breakdown structures ur olika synvinklar för ett projekt.
      - Algoritmiska modeller för uppskattningar av projekt baseras på empirisk data.
      - Ett Gantt-schema kan användas för att visa marginaler för aktiviteter i ett projekt.
      - Milstolpe och leverabel är olika ord för samma sak.
      - Algoritmiska modeller ger bättre uppskattningar än erfarenhetsbaserade modeller.
      - Vid en försening så är en effektiv lösning att sätta in fler personer i ett projekt men detta är ofta svårt att göra på grund av resursbrist.
    correct:
      - 0
      - 1
      - 2
    categories:
      - projektplanering
    source: 'DA335A-T20190613Q13'
